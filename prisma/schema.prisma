local// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  
  // Additional user-specific fields
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  role          UserRole  @default(USER)
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Enum for user roles
enum UserRole {
  USER
  ADMIN
  MODERATOR
}

// Subscription Tier Enum
enum SubscriptionTier {
  FREE
  STARTER
  PRO
  ENTERPRISE
}

// Optional: Add a model for additional user-specific data
model UserProfile {
  id        String   @id @default(cuid())
  userId    String   @unique
  bio       String?
  location  String?
  website   String?
  twitter   String?
  linkedin  String?
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Model to track user subscriptions and usage
model UserSubscription {
  id              String           @id @default(cuid())
  userId          String           @unique
  tier            SubscriptionTier @default(FREE)
  currentPeriodStart DateTime       @default(now())
  currentPeriodEnd DateTime
  maxListingsPerMonth Int           @default(2)
  maxImagesPerListing Int           @default(20)
  
  // Billing and payment tracking
  stripeCustomerId String?
  stripeSubscriptionId String?
}

// Model to track uploaded images
model UploadedImage {
  id          String   @id @default(cuid())
  userId      String
  fileName    String
  fileSize    Int
  mimeType    String
  s3Key       String
  uploadedAt  DateTime @default(now())
  processedAt DateTime?
  
  // Relationship to user
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// Model to track listing generation
model ListingGeneration {
  id            String   @id @default(cuid())
  userId        String
  images        UploadedImage[]
  status        ListingStatus
  generatedAt   DateTime @default(now())
  completedAt   DateTime?
  aiConfidence  Float?
  platformListing String?
  
  // Relationship to user
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// Enum for listing generation status
enum ListingStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
}

// Extend User model to include relationships
model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  
  // Additional user-specific fields
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  role          UserRole  @default(USER)
  
  // New relationships
  uploadedImages UploadedImage[]
  listingGenerations ListingGeneration[]
}
